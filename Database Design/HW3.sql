CREATE TABLE IN_DEPT (
    EID INT NOT NULL,
    DID INT NOT NULL,
    Percent_Time INT NOT NULL DEFAULT 0,
    CONSTRAINT IN_DEPT_PRIM 
    PRIMARY KEY (EID, DID),
    CONSTRAINT FK_EMP_EID 
    FOREIGN KEY (EID) REFERENCES EMP(EID)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    CONSTRAINT FK_DEPT_DID 
    FOREIGN KEY (DID) REFERENCES DEPT(DID)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    CONSTRAINT POSITIVE_PERCENT_TIME CHECK (Percent_Time >= 0)
);


-- ==================================================
-- ==================================================

-- 1.
SELECT D.DName
FROM DEPT as D
LEFT OUTER JOIN IN_DEPT AS I ON D.DID = I.DID
WHERE I.EID IS NULL;

-- 2.
SELECT B.BName
FROM BUILDING AS B
JOIN IN_BUILDING AS I ON B.BID = I.BID
GROUP BY B.BName
HAVING COUNT(I.EID) > 50;

-- 3.
SELECT D.DName
FROM DEPT AS D
JOIN IN_DEPT AS I ON D.DID = I.DID
JOIN EMP AS E ON I.EID = E.EID
WHERE E.Salary = (
    SELECT MAX(Salary)
    FROM EMP
);

-- 4.
UPDATE EMP
SET SALARY = SALARY + 10000
WHERE EID IN (
    SELECT M.EID
    FROM MANAGES_DEPT AS M
    JOIN IN_DEPT AS I ON M.DID = I.DID
    GROUP BY M.EID
    HAVING COUNT(I.EID) > 50
);

-- 5.
DELETE FROM BUILDING
WHERE BID NOT IN (
    SELECT BID
    FROM IN_BUILDING
    GROUP BY BID
    HAVING COUNT(EID) > 50
);

-- 6.
CREATE ASSERTION MANAGE_CONSTRAINT
CHECK (
    NOT EXISTS (
        SELECT EID
        FROM MANAGES_DEPT
        GROUP BY EID
        HAVING COUNT(DID) > 3
    )
);

-- 7.
CREATE VIEW BuildingNameAndNumEmployee
AS SELECT B.BName, COUNT(I.EID)
FROM BUILDING AS B
LEFT OUTER JOIN IN_BUILDING AS I ON B.BID = I.BID
GROUP BY B.BName;